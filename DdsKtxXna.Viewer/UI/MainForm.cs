/* Generated by MyraPad at 9/15/2023 6:47:58 PM */
using System;
using System.IO;
using Microsoft.Xna.Framework.Graphics;
using Myra;
using Myra.Graphics2D.TextureAtlases;
using Myra.Graphics2D.UI;
using Myra.Graphics2D.UI.File;

namespace DdsKtxXna.Viewer.UI
{
	public partial class MainForm
	{
		private TextureCube _textureCube;

		public MainForm()
		{
			BuildUI();

			_buttonBrowse.Click += (s, a) =>
			{
				FileDialog dialog = new FileDialog(FileDialogMode.OpenFile)
				{
					Filter = "*.dds",
					FilePath = _textBoxPath.Text,
				};

				dialog.Closed += (s, a) =>
				{
					if (!dialog.Result)
					{
						// "Cancel" or Escape
						return;
					}

					// "Ok" or Enter
					// ...
					Update(dialog.FilePath);
				};

				dialog.ShowModal(Desktop);
			};

			_comboCubePlane.SelectedIndexChanged += (s, a) =>
			{
				if (_comboCubePlane.SelectedIndex == null)
				{
					return;
				}

				_image.Renderable = new TextureRegion(_textureCube.FaceToTexture((CubeMapFace)_comboCubePlane.SelectedIndex.Value));
			};

			Update(null);
		}

		private void Update(string path)
		{
			// Clear
			_textBoxPath.Text = path;
			_labelType.Text = string.Empty;
			_labelFormat.Text = string.Empty;
			_labelWidth.Text = string.Empty;
			_labelHeight.Text = string.Empty;
			_labelLevels.Text = string.Empty;
			_comboCubePlane.SelectedIndex = null;
			_comboCubePlane.Enabled = false;
			_image.Renderable = null;

			if (string.IsNullOrEmpty(path))
			{
				return;
			}

			Texture texture;

			try
			{
				using (var stream = File.OpenRead(path))
				{
					texture = DdsKtxLoader.FromStream(MyraEnvironment.GraphicsDevice, stream);
				}
			}
			catch(Exception ex)
			{
				var dlg = Dialog.CreateMessageBox("Error", ex.ToString());
				dlg.ShowModal(Desktop);
				return;
			}

			_labelFormat.Text = $"Format: {texture.Format}";
			_labelLevels.Text = $"Levels: {texture.LevelCount}";

			switch(texture)
			{
				case Texture2D texture2d:
					_labelType.Text = "Type: 2D";
					_labelWidth.Text = $"Width: {texture2d.Width}";
					_labelHeight.Text = $"Height: {texture2d.Height}";
					_image.Renderable = new TextureRegion(texture2d);
					break;
				case TextureCube textureCube:
					_textureCube = textureCube;
					_labelType.Text = "Type: Cube";
					_labelWidth.Text = $"Width: {textureCube.Size}";
					_labelHeight.Text = $"Height: {textureCube.Size}";
					_comboCubePlane.Enabled = true;
					_comboCubePlane.SelectedIndex = 0;
					break;
			}
		}

	}
}